import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { 
  Box, 
  Typography, 
  Paper, 
  List, 
  ListItem, 
  ListItemText, 
  TextField, 
  Button, 
  Grid,
  Modal,
  Snackbar,
  Alert,
  Chip,
  Avatar,
  Divider,
  useTheme,
} from '@mui/material';
import { AccessTime, Person, Assignment, PriorityHigh, LocationOn, Send, PhoneAndroid, Business, Description } from '@mui/icons-material';
import { getTickets, getTicketComments, addComment } from '../services/TicketService';
import { getUserInfo } from '../services/UserService';
import { formatDistanceToNow } from 'date-fns';
import { es } from 'date-fns/locale';

const TicketDetails = () => {
  const { ticketId } = useParams();
  const [ticket, setTicket] = useState(null);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [token] = useState(localStorage.getItem('token'));
  const [userInfo, setUserInfo] = useState(null);
  const theme = useTheme();

  useEffect(() => {
    const fetchUserInfo = async () => {
      const info = await getUserInfo();
      setUserInfo(info);
    };
    fetchUserInfo();
  }, []);

  useEffect(() => {
    const fetchTicketDetails = async () => {
      try {
        const ticketData = await getTickets(token);
        const ticketDetails = ticketData.find(t => t.id === parseInt(ticketId));
        setTicket(ticketDetails);
        
        const commentsData = await getTicketComments(ticketId, token);
        setComments(commentsData);
      } catch (error) {
        console.error('Error fetching ticket details:', error);
        setSnackbarMessage('Error al cargar los detalles del ticket');
        setSnackbarOpen(true);
      }
    };

    fetchTicketDetails();
    const interval = setInterval(() => {
      setComments(prevComments => [...prevComments]); // Forzar actualización
    }, 60000); // Actualizar cada minuto

    return () => clearInterval(interval);
  }, [ticketId, token]);

  const loadComments = async () => {
    try {
      const commentsData = await getTicketComments(ticketId, token);
      setComments(commentsData);
    } catch (error) {
      console.error('Error fetching ticket comments:', error);
      setSnackbarMessage('Error al cargar los comentarios');
      setSnackbarOpen(true);
    }
  };

  const handleAddComment = async () => {
    if (newComment.trim() === '') {
      setSnackbarMessage('Por favor, escribe un comentario antes de confirmar.');
      setSnackbarOpen(true);
      return;
    }

    try {
      await addComment(ticketId, newComment, token);
      setNewComment('');
      setSnackbarMessage('Comentario agregado exitosamente');
      setSnackbarOpen(true);
      setShowConfirmationModal(false);
      await loadComments();
    } catch (error) {
      console.error('Error adding comment:', error);
      setSnackbarMessage('Error al agregar el comentario');
      setSnackbarOpen(true);
    }
  };

  const handleOpenConfirmationModal = () => {
    setShowConfirmationModal(true);
  };

  const handleCloseConfirmationModal = () => {
    setShowConfirmationModal(false);
  };

  const formatDate = (dateString) => {
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit', 
      timeZone: 'UTC'
    };
    return new Date(dateString).toLocaleString('es-EC', options);
  };

  const getInitials = (name) => {
    return name ? name.split(' ').map(n => n[0]).join('').toUpperCase() : '??';
  };

  const getTimeAgo = (dateString) => {
    const dateFromDatabase = new Date(dateString);
    const adjustedDate = new Date(dateFromDatabase.getTime() - (-5 * 60 * 60 * 1000)); // Restar 5 horas en milisegundos

    const distance = formatDistanceToNow(adjustedDate, { locale: es });
    return `Hace ${distance.replace('alrededor de ', '')}`;
  };

  const getAvatarColor = (userId) => {
    const colors = [
      '#9C27B0', '#673AB7', '#FF5722', '#FF9800', 
      '#795548', '#9E9E9E', '#607D8B', '#E91E63'
    ];
    return colors[userId % colors.length];
  };

  const getStatusInSpanish = (status) => {
    const statusMap = {
      'open': 'Abierto',
      'in_process': 'En proceso',
      'closed': 'Cerrado'
    };
    return statusMap[status] || status;
  };

  if (!ticket) {
    return <Typography>Cargando...</Typography>;
  }

  return (
    <Box sx={{ maxWidth: 1200, margin: 'auto', mt: 2 }}>
      <Typography variant="h4" gutterBottom>{`Ticket #${ticketId}: ${ticket.title}`}</Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12} md={8}>
          <Paper elevation={3} sx={{ p: 3, mb: 3, backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#fff' }}>
            <Typography variant="h6" gutterBottom>Detalles del Ticket</Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <AccessTime sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Creado el {formatDate(ticket.created_at)}
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Person sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Creado por: {ticket.created_by_username}
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Assignment sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Estado: <Chip label={getStatusInSpanish(ticket.status)} color={ticket.status === 'open' ? 'error' : ticket.status === 'in_process' ? 'warning' : 'success'} size="small" />
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <PriorityHigh sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Prioridad: <Chip label={ticket.priority} color={ticket.priority === 'high' ? 'error' : ticket.priority === 'medium' ? 'warning' : 'success'} size="small" />
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <LocationOn sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Sucursal: {ticket.zone_name}
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Description sx={{ mr: 1 }} />
                  <Typography variant="body2">
                    Descripción: {ticket.description}
                  </Typography>
                </Box>
              </Grid>
            </Grid>
          </Paper>

          <Paper elevation={3} sx={{ p: 3, backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#fff' }}>
            <Typography variant="h6" gutterBottom>Comentarios</Typography>
            <Box sx={{ display: 'flex', alignItems: 'flex-end', mb: 3 }}>
              <Avatar 
                sx={{ mr: 2, bgcolor: getAvatarColor(userInfo?.id || 0) }}
              >
                {userInfo ? getInitials(userInfo.username) : '??'}
              </Avatar>
              <TextField
                fullWidth
                multiline
                rows={2}
                variant="outlined"
                label="Agregar un comentario"
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                sx={{ mr: 2 }}
              />
              <Button 
                variant="contained" 
                color="primary" 
                onClick={handleOpenConfirmationModal} 
                disabled={newComment.trim() === ''}
                endIcon={<Send />}
              >
                Enviar
              </Button>
            </Box>
            <List>
              {comments.map((comment, index) => (
                <React.Fragment key={comment.id}>
                  <ListItem alignItems="flex-start" sx={{ py: 2 }}>
                    <Avatar 
                      sx={{ mr: 2, bgcolor: getAvatarColor(comment.user_id) }}
                    >
                      {getInitials(comment.username)}
                    </Avatar>
                    <ListItemText
                      primary={
                        <Typography
                          component="span"
                          variant="body1"
                          color="text.primary"
                          sx={{ fontWeight: 'bold', display: 'inline' }}
                        >
                          {comment.username}
                        </Typography>
                      }
                      secondary={
                        <React.Fragment>
                          <Typography
                            component="span"
                            variant="body2"
                            color="text.secondary"
                          >
                            {formatDate(comment.created_at)}
                          </Typography>
                          <Typography
                            component="p"
                            variant="body1"
                            color="text.primary"
                            sx={{ mt: 1 }}
                          >
                            {comment.comment}
                          </Typography>
                        </React.Fragment>
                      }
                    />
                    <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
                      {getTimeAgo(comment.created_at)}
                    </Typography>
                  </ListItem>
                  {index < comments.length - 1 && <Divider variant="inset" component="li" />}
                </React.Fragment>
              ))}
            </List>
          </Paper>
        </Grid>

        <Grid item xs={12} md={4}>
          <Paper elevation={3} sx={{ p: 3, mb: 3, backgroundColor: theme.palette.mode === 'dark' ? '#424242' : '#FFF3E0' }}>
            <Typography variant="h6" gutterBottom>Información del Cliente</Typography>
            <Typography><strong>Nombre:</strong> {ticket.requester_name}</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
              <PhoneAndroid sx={{ mr: 1 }} />
              <Typography><strong>Contacto:</strong> {ticket.requester_contact}</Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
              <Business sx={{ mr: 1 }} />
              <Typography><strong>ID Cliente:</strong> {ticket.client_id}</Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
              <Description sx={{ mr: 1 }} />
              <Typography><strong>Contrato ID:</strong> {ticket.contract_id}</Typography>
            </Box>
          </Paper>
          <Paper elevation={3} sx={{ p: 3, backgroundColor: theme.palette.mode === 'dark' ? '#424242' : '#E8EAF6' }}>
            <Typography variant="h6" gutterBottom>Tiempo Transcurrido</Typography>
            <Typography>{getTimeAgo(ticket.created_at)}</Typography>
          </Paper>
        </Grid>
      </Grid>

      <Modal
        open={showConfirmationModal}
        onClose={handleCloseConfirmationModal}
        aria-labelledby="modal-title"
        aria-describedby="modal-description"
      >
        <Box sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 24,
          borderRadius: 2,
          p: 4,
        }}>
          <Typography variant="h6" gutterBottom id="modal-title">Confirmación</Typography>
          <Typography variant="body1" id="modal-description">
            ¿Estás seguro de que deseas agregar este comentario?
          </Typography>
          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
            <Button onClick={handleCloseConfirmationModal} color="secondary" variant="outlined" sx={{ mr: 2 }}>
              Cancelar
            </Button>
            <Button onClick={handleAddComment} color="primary" variant="contained">
              Confirmar
            </Button>
          </Box>
        </Box>
      </Modal>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
      >
        <Alert onClose={() => setSnackbarOpen(false)} severity="info" sx={{ width: '100%' }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default TicketDetails;



exports.updateTicket = async (req, res) => {
  let connection;
  try {
    connection = await getMainDb();
    const user = await getUserFromToken(req, connection);
    const ticketId = req.params.id;
    const { action } = req.body;

    // Verificar que el ticket existe
    const [ticketResult] = await connection.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
    if (ticketResult.length === 0) {
      return res.status(404).json({ message: 'Ticket not found' });
    }
    const ticket = ticketResult[0];

    let updateFields = {};
    const currentTime = new Date();

    switch (action) {
      case 'start':
        if (ticket.status !== 'open') {
          return res.status(400).json({ message: 'Ticket can only be started if it is open' });
        }
        updateFields = {
          status: 'in_progress',
          started_at: currentTime,
          assigned_to: user.id
        };
        break;
      case 'resolve':
        if (ticket.status !== 'in_progress') {
          return res.status(400).json({ message: 'Ticket can only be resolved if it is in progress' });
        }
        updateFields = {
          status: 'resolved',
          resolved_at: currentTime
        };
        break;
      case 'close':
        if (user.role_name !== 'Control de Calidad') {
          return res.status(403).json({ message: 'Only Quality Control can close tickets' });
        }
        if (ticket.status !== 'resolved') {
          return res.status(400).json({ message: 'Ticket can only be closed if it is resolved' });
        }
        updateFields = {
          status: 'closed',
          closed_at: currentTime
        };
        break;
      default:
        return res.status(400).json({ message: 'Invalid action' });
    }

    // Actualizar el ticket
    await connection.query(
      'UPDATE tickets SET ? WHERE id = ?',
      [{ ...updateFields, updated_at: currentTime }, ticketId]
    );

    // Obtener el ticket actualizado
    const [updatedTicket] = await connection.query(`
      SELECT t.*, a.name AS agency_name, d.name AS department_name,
             u.username AS created_by_username,
             u.first_name AS created_by_first_name,
             u.phone_number AS created_by_phone
      FROM tickets t
      LEFT JOIN agencies a ON t.agency_id = a.id
      LEFT JOIN departments d ON t.department_id = d.id
      LEFT JOIN users u ON t.created_by = u.id
      WHERE t.id = ?
    `, [ticketId]);

    res.json({
      message: 'Ticket updated successfully',
      ticket: updatedTicket[0]
    });
  } catch (error) {
    console.error('Error updating ticket:', error);
    res.status(500).json({ message: 'Error updating ticket', error: error.message });
  } finally {
    if (connection) connection.release();
  }
};